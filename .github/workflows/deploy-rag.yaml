name: Deploy Feature Branch to AWS

on:
  push:
    branches:
      - 'feature/**'  # Trigger on pushes to branches starting with 'feature/'
      - 'main'  # Also allow manual trigger or push for main if needed for testing this workflow
  pull_request:
    types: [closed]
    branches:
      - 'main'  # Trigger cleanup when PR is closed (merged or closed without merge)

permissions:
  id-token: write  # Required for OIDC if we switch to it
  contents: read

jobs:
  setup:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      stack-suffix: ${{ steps.branch-info.outputs.stack-suffix }}

    steps:
      # ------------------------------
      # Checkout and Setup
      # ------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # ------------------------------
      # Determine Branch Name and Stack Suffix
      # ------------------------------
      - name: Determine Branch Name and Stack Suffix
        id: branch-info
        run: |
          # Get the full branch name (e.g., feature/my-task or main)
          BRANCH_FULL_NAME=${{ github.ref_name }}
          echo "Full branch name from github.ref_name: ${BRANCH_FULL_NAME}"

          # Extract the part after 'feature/' if it's a feature branch
          if [[ "${BRANCH_FULL_NAME}" == feature/* ]]; then
            # Use substring removal: ${string#prefix}
            # This removes 'feature/' from the beginning of BRANCH_FULL_NAME
            FEATURE_NAME_PART=${BRANCH_FULL_NAME#feature/}
          else
            # For other branches (e.g., main), use the full branch name
            FEATURE_NAME_PART=${BRANCH_FULL_NAME}
          fi
          echo "Name part for suffix: ${FEATURE_NAME_PART}"

          # Sanitize: replace any slashes (e.g., if feature_name_part was 'foo/bar') with hyphens
          SANITIZED_NAME=$(echo "${FEATURE_NAME_PART}" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]') # also convert to lowercase
          echo "Sanitized name: ${SANITIZED_NAME}"          # Create a shorter, safer suffix for stack names (max 20 chars as previously)
          # CloudFormation stack names can be up to 128 chars, but resource names derived from it might have stricter limits.
          # S3 bucket names also have length limits and character restrictions (e.g. no underscores, lowercase).
          STACK_SUFFIX=$(echo "${SANITIZED_NAME}" | cut -c1-20)
          
          # Set STACK_SUFFIX to empty string if it evaluates to "main"
          if [[ "${STACK_SUFFIX}" == "main" ]]; then
            STACK_SUFFIX=""
          fi
          
          echo "Final STACK_SUFFIX: ${STACK_SUFFIX}"
          echo "stack-suffix=${STACK_SUFFIX}" >> $GITHUB_OUTPUT

  quality_checks:
    if: github.event_name == 'push'
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check-type: [lint, test]

    steps:
      # ------------------------------
      # Checkout and Setup
      # ------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # ------------------------------
      # Install AWS CDK and Configure AWS Credentials
      # ------------------------------
      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}  # Default region, can be overridden

      # ------------------------------
      # Poetry and Dependency Management
      # ------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '2.1.3'
          virtualenvs-create: true
          virtualenvs-in-project: true  # Recommended for CI caching
          virtualenvs-path: .venv
          installer-parallel: true

      # ------------------------------
      # Load Cached Dependencies
      # ------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # ------------------------------
      # Install Dependencies if Cache Miss
      # ------------------------------
      - name: Install dependencies (if cache miss)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # ------------------------------
      # Run Quality Checks
      # ------------------------------
      - name: Run linters
        if: matrix.check-type == 'lint'
        run: |
          poetry run flake8 src/ -v
          poetry run black --check src/
          poetry run isort --check src/

      - name: Run tests
        if: matrix.check-type == 'test'
        run: poetry run nox

  cdk_synth:
    if: github.event_name == 'push'
    needs: [setup, quality_checks]
    runs-on: ubuntu-latest

    steps:
      # ------------------------------
      # Checkout and Setup
      # ------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # ------------------------------
      # Poetry and Dependency Management
      # ------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '2.1.3'
          virtualenvs-create: true
          virtualenvs-in-project: true  # Recommended for CI caching
          virtualenvs-path: .venv
          installer-parallel: true

      # ------------------------------
      # Load Cached Dependencies
      # ------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # ------------------------------
      # Install Dependencies if Cache Miss
      # ------------------------------
      - name: Install dependencies (if cache miss)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # ------------------------------
      # Install AWS CDK and Configure AWS Credentials
      # ------------------------------
      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}  # Default region, can be overridden

      # ------------------------------
      # CDK Synth
      # ------------------------------
      - name: CDK Synth
        run: |
          poetry run cdk synth \
            --context stack-suffix=${{ needs.setup.outputs.stack-suffix }} \
            -q
        env:
          CDK_DEFAULT_ACCOUNT: ${{ vars.CDK_DEFAULT_ACCOUNT }}
          CDK_DEFAULT_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}  # Default region, can be overridden
          AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}  # Default region, can be overridden

  deploy_stack:
    if: github.event_name == 'push'
    needs: [setup, quality_checks, cdk_synth]
    runs-on: ubuntu-latest
    environment: feature-deployment  # Optional: Define a GitHub environment for feature deployments

    steps:
      # ------------------------------
      # Checkout and Setup
      # ------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # ------------------------------
      # Poetry and Dependency Management
      # ------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '2.1.3'
          virtualenvs-create: true
          virtualenvs-in-project: true  # Recommended for CI caching
          virtualenvs-path: .venv
          installer-parallel: true

      # ------------------------------
      # Load Cached Dependencies
      # ------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # ------------------------------
      # Install Dependencies if Cache Miss
      # ------------------------------
      - name: Install dependencies (if cache miss)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # ------------------------------
      # Install AWS CDK and Configure AWS Credentials
      # ------------------------------
      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}  # Default region, can be overridden

      # ------------------------------
      # CDK Deploy
      # ------------------------------
      - name: CDK Deploy
        run: |
          poetry run cdk deploy --all --require-approval never \
            --context stack-suffix=${{ needs.setup.outputs.stack-suffix }}
        env:
          CDK_DEFAULT_ACCOUNT: ${{ vars.CDK_DEFAULT_ACCOUNT }}
          CDK_DEFAULT_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}  # Default region, can be overridden
          AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}  # Default region, can be overridden

  cleanup_stack:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: feature-deployment

    steps:
      # ------------------------------
      # Checkout and Setup
      # ------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # ------------------------------
      # Poetry and Dependency Management
      # ------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '2.1.3'
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies (if cache miss)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # ------------------------------
      # Configure AWS and CDK
      # ------------------------------
      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}

      # ------------------------------
      # Determine Stack Suffix for Cleanup
      # ------------------------------
      - name: Determine Stack Suffix for Cleanup
        id: cleanup-branch-info
        run: |
          # Extract the feature branch name from the PR head ref
          BRANCH_FULL_NAME="${{ github.event.pull_request.head.ref }}"
          echo "PR head branch name: ${BRANCH_FULL_NAME}"

          # Extract the part after 'feature/' if it's a feature branch
          if [[ "${BRANCH_FULL_NAME}" == feature/* ]]; then
            FEATURE_NAME_PART=${BRANCH_FULL_NAME#feature/}
          else
            FEATURE_NAME_PART=${BRANCH_FULL_NAME}
          fi
          echo "Name part for suffix: ${FEATURE_NAME_PART}"

          # Sanitize: replace any slashes with hyphens and convert to lowercase
          SANITIZED_NAME=$(echo "${FEATURE_NAME_PART}" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          echo "Sanitized name: ${SANITIZED_NAME}"

          # Create the same suffix that was used during deployment
          STACK_SUFFIX=$(echo "${SANITIZED_NAME}" | cut -c1-20)
          
          # Set STACK_SUFFIX to empty string if it evaluates to "main"
          if [[ "${STACK_SUFFIX}" == "main" ]]; then
            STACK_SUFFIX=""
          fi
          
          echo "Stack suffix for cleanup: ${STACK_SUFFIX}"
          echo "STACK_SUFFIX=${STACK_SUFFIX}" >> $GITHUB_ENV

      # ------------------------------
      # Cleanup CDK Stack
      # ------------------------------
      - name: CDK Destroy Feature Branch Stack
        run: |
          echo "Destroying CDK stack with suffix: ${{ env.STACK_SUFFIX }}"
          poetry run cdk destroy --all --force \
            --context stack-suffix=${{ env.STACK_SUFFIX }}
        env:
          CDK_DEFAULT_ACCOUNT: ${{ vars.CDK_DEFAULT_ACCOUNT }}
          CDK_DEFAULT_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}  # Default region, can be overridden
          AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}  # Default region, can be overridden
